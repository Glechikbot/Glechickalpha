
import logging
import os
import time
import telebot
import random
import json
import requests
from datetime import datetime
from flask import Flask
import threading

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
logging.basicConfig(level=logging.INFO)
TOKEN = os.getenv("BOT_TOKEN")
USER_ID = int(os.getenv("USER_ID"))

# –í–∏–¥–∞–ª–∏—Ç–∏ Webhook
requests.get(f"https://api.telegram.org/bot{TOKEN}/deleteWebhook?drop_pending_updates=true")
bot = telebot.TeleBot(TOKEN)

# Flask –¥–ª—è keep-alive
app = Flask(__name__)
@app.route('/')
def home():
    return "–ì–ª–µ—á–∏–∫ –∂–∏–≤–∏–π! üöÄ"

# –î–∞–Ω—ñ
HACKS_FILE = "life_hacks.txt"
TASKS_FILE = "tasks.txt"
STATS_FILE = "stats.json"
LOG_FILE = "progress_log.txt"

# –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏
with open(HACKS_FILE, encoding="utf-8") as f:
    life_hacks = [line.strip() for line in f if line.strip()]
with open(TASKS_FILE, encoding="utf-8") as f:
    tasks = [line.strip() for line in f if line.strip()]

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
if os.path.exists(STATS_FILE):
    with open(STATS_FILE, encoding="utf-8") as f:
        stats = json.load(f)
else:
    stats = {"points": 0}

# –ó–±–µ—Ä–µ–≥—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
def save_stats():
    with open(STATS_FILE, "w", encoding="utf-8") as f:
        json.dump(stats, f, ensure_ascii=False)

# –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
lazy_reasons = [
    "üò¥ –ù–µ –∑–Ω–∞–≤, –∑ —á–æ–≥–æ –ø–æ—á–∞—Ç–∏",
    "üì± –ó–∞–ª–∏–ø —É TikTok –∞–±–æ —Ä—ñ–ª—Å–∏",
    "üôÅ –ù–µ –±—É–ª–æ –Ω–∞—Å—Ç—Ä–æ—é",
    "üò¨ –ó–¥–∞–≤–∞–ª–æ—Å—å, —â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –≤–∏–π–¥–µ",
    "ü§∑ –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü—ñ—è",
    "üîÑ –ß–µ–∫–∞–≤ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è, –∞–ª–µ –Ω–µ –ø—Ä–∏–π—à–ª–æ"
]

survival_tasks = [
    "üì≤ –ó—Ä–æ–±–∏—Ç–∏ –ø–æ—Å—Ç —É —ñ–Ω—Å—Ç—É",
    "üèãÔ∏è 20 –ø—Ä–∏—Å—ñ–¥–∞–Ω—å",
    "üõçÔ∏è –ù–∞–∑–≤–∞—Ç–∏ –æ–¥–Ω—É –Ω–æ–≤—É —ñ–¥–µ—é –¥–ª—è —Ç–æ–≤–∞—Ä—É",
    "üß† –ó–∞–ø–∏—Å–∞—Ç–∏ 3 —Ä–µ—á—ñ, —è–∫—ñ —Ç–µ–±–µ –ø–æ—Ä–∞–¥—É–≤–∞–ª–∏ —Å—å–æ–≥–æ–¥–Ω—ñ"
]

motivations = [
    "–ê —Ç–∏ –≤–∂–µ —Å—Ç–≤–æ—Ä–∏–≤ –∞–∫–∞—É–Ω—Ç –¥–ª—è –º–∞–≥–∞–∑–∏–Ω—É —á–∏ –∑–Ω–æ–≤—É —Ç—ñ–ª—å–∫–∏ –º–µ–º–∏ —à–∞—Ä–∏—à?",
    "–ó—Ä–æ–±–∏ –ø–æ—Å—Ç —É —ñ–Ω—Å—Ç—É. –ù–∞–≤—ñ—Ç—å —è–∫—â–æ –ª–∞–π–∫–Ω–µ —Ç—ñ–ª—å–∫–∏ –º–∞–º–∞ ‚Äî –≤–∂–µ –∞—É–¥–∏—Ç–æ—Ä—ñ—è.",
    "–ü–æ–∫–∏ –Ω–µ —Å—Ç–≤–æ—Ä–∏—à –º–∞–≥–∞–∑–∏–Ω ‚Äî –Ω—ñ –æ–¥–Ω–∞ –∫–æ—Ä–æ–±–∫–∞ –∑ —Ç–æ–≤–∞—Ä–æ–º —Å–∞–º–∞ —Å–µ–±–µ –Ω–µ –ø—Ä–æ–¥–∞—Å—Ç—å.",
    "–í—ñ–¥—Ç–∏—Å–Ω–∏—Å—å 10 —Ä–∞–∑—ñ–≤. –ù–µ –≤—ñ–¥ –ø—Ä–æ–±–ª–µ–º ‚Äî –≤—ñ–¥ –ø—ñ–¥–ª–æ–≥–∏.",
    "10 –ø—Ä–∏—Å—ñ–¥–∞–Ω—å ‚Äî –Ω–µ —Å–ø–æ—Ä—Ç, –∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–Ω—è –≤—ñ–¥ —Å–∞–º–æ–±–∏—á—É–≤–∞–Ω–Ω—è.",
    "–ü–æ–≤–µ—Ä–Ω–∏—Å—å –¥–æ —Ç—ñ–ª–∞. –í–æ–Ω–æ —Ç–æ–±—ñ –Ω–µ –º—Å—Ç–∏—Ç—å, –≤–æ–Ω–æ –ø—Ä–æ—Å–∏—Ç—å —Ö–æ—á —â–æ—Å—å –∑—Ä–æ–±–∏—Ç–∏.",
    "–•–æ—á –æ–¥–∏–Ω —Ä—É—Ö ‚Äî —ñ —Ç–∏ –≤–∂–µ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ª–µ–∂–∏—à. –¢–∏ ‚Äî –≥–µ—Ä–æ–π –∫–∞–¥–µ–Ω—Ü—ñ—ó.",
]

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
def build_morning_message():
    return f"""üéØ –î–æ–±—Ä–∏–π —Ä–∞–Ω–æ–∫, –≥–ª–µ—á–∏–Ω–æ!
–°—å–æ–≥–æ–¥–Ω—ñ –∑–∞–º—ñ—Å—Ç—å TikTok:
1Ô∏è‚É£ –ü–ª–∞–Ω: –≤–∏–ø–∏–π –≤–æ–¥–∏
2Ô∏è‚É£ –ñ–∏—Ç—Ç—î–≤–∏–π —Ö–∞–∫: {random.choice(life_hacks)}
3Ô∏è‚É£ –°–ø—Ä–∞–≤–∂–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è: {random.choice(tasks)}

–ù–∞–ø–∏—à–∏ /done –∫–æ–ª–∏ –≤–∏–∫–æ–Ω–∞—î—à ‚Äî +10 –±–∞–ª—ñ–≤."""

def build_survival_message():
    return "üí• *–°—å–æ–≥–æ–¥–Ω—ñ ‚Äî –î–µ–Ω—å –≤–∏–∂–∏–≤–∞–Ω–Ω—è!* –í–∏–∫–æ–Ω–∞–π —É—Å–µ:
" + "
".join(survival_tasks)

def build_lazy_check():
    return "‚ùì –©–æ –∑ —Ü—å–æ–≥–æ —Ç–µ–±–µ –∑—É–ø–∏–Ω–∏–ª–æ —Å—å–æ–≥–æ–¥–Ω—ñ?
" + "
".join(lazy_reasons)

# –ß–∞—Å –¥–ª—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –º–æ—Ç–∏–≤–∞—Ç–æ—Ä–∞
random.seed(datetime.now().date().toordinal())
hour = random.randint(12, 17)
minute = random.randint(0, 59)
rand_motivation_time = f"{hour:02d}:{minute:02d}"

# –†–æ–∑–∫–ª–∞–¥
messages = {
    "05:00": build_morning_message,
    "14:00": lambda: "üß† –Ø–∫ –Ω–∞—Å—Ç—Ä—ñ–π –ø–æ 10-–±–∞–ª—å–Ω—ñ–π —à–∫–∞–ª—ñ? (–≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ–º)",
    "21:00": lambda: "üåô –í–µ—á—ñ—Ä –Ω–∞—Å—Ç–∞–≤. –ù–∞–ø–∏—à–∏, —â–æ –∑—Ä–æ–±–∏–≤ —Å—å–æ–≥–æ–¥–Ω—ñ —á–µ—Ä–µ–∑ /done:

" + build_lazy_check(),
    rand_motivation_time: lambda: random.choice(motivations)
}

# Survival –ø–æ–Ω–µ–¥—ñ–ª–æ–∫ 09:00
if datetime.utcnow().weekday() == 0:
    messages["09:00"] = build_survival_message

# –°—Ç–∞–Ω
sent_flags = set()
last_day = None

def send_timed_messages():
    global sent_flags, last_day
    now = datetime.utcnow()
    time_key = now.strftime("%H:%M")
    today = now.strftime("%Y-%m-%d")
    if last_day != today:
        sent_flags.clear()
        last_day = today
    if time_key in messages and time_key not in sent_flags:
        text = messages[time_key]()
        bot.send_message(USER_ID, text)
        sent_flags.add(time_key)

# –ö–æ–º–∞–Ω–¥–∏
@bot.message_handler(commands=['done'])
def handle_done(message):
    text = message.text.replace("/done", "").strip()
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M")
    if text:
        with open(LOG_FILE, "a", encoding="utf-8") as f:
            f.write(f"[{timestamp}] {text}\n")
        stats["points"] += 10
        save_stats()
        level = stats["points"] // 100
        levels = ['–ù–æ–≤–∞—á–æ–∫','–°—Ç—Ä–∞—Ç–µ–≥','–ú–∞–π—Å—Ç–µ—Ä','–ì–µ–Ω–µ—Ä–∞–ª','–õ–µ–≥–µ–Ω–¥–∞']
        reply = f"üìù –ó–∞–ø–∏—Å–∞–Ω–æ —Ç–∞ +10 –±–∞–ª—ñ–≤! –£—Å—å–æ–≥–æ: {stats['points']} –±–∞–ª—ñ–≤."
        if stats["points"] % 100 == 0:
            reply += f" üéâ –¢–∏ –¥–æ—Å—è–≥ —Ä—ñ–≤–Ω—è ¬´{levels[level] if level < len(levels) else levels[-1]}¬ª!"
        bot.reply_to(message, reply)
    else:
        bot.reply_to(message, "–ù–∞–ø–∏—à–∏, —â–æ –∑—Ä–æ–±–∏–≤ —á–µ—Ä–µ–∑ /done, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:\n/done –∑—Ä–æ–±–∏–≤ —Ä–∞–Ω–∫–æ–≤—É —Ä—É—Ç–∏–Ω—É")

@bot.message_handler(commands=['show_today'])
def handle_show_today(message):
    today = datetime.now().strftime("%Y-%m-%d")
    if os.path.exists(LOG_FILE):
        with open(LOG_FILE, "r", encoding="utf-8") as f:
            lines = [l for l in f.readlines() if l.startswith(f"[{today}")]
            msg = "üìò –¢–≤–æ—ó —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ –∑–∞–ø–∏—Å–∏:\n" + "".join(lines) if lines else "–°—å–æ–≥–æ–¥–Ω—ñ —â–µ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ."
            bot.reply_to(message, msg)

# –ü–æ—Ç–æ–∫–∏
def run_scheduler():
    while True:
        send_timed_messages()
        time.sleep(60)

def run_polling():
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            logging.error(f"Polling error: {e}")
            time.sleep(5)

# –°—Ç–∞—Ä—Ç
if __name__ == '__main__':
    threading.Thread(target=run_scheduler, daemon=True).start()
    threading.Thread(target=run_polling, daemon=True).start()
    app.run(host='0.0.0.0', port=int(os.environ.get("PORT", 10000)))
