
import logging
import os
import time
import telebot
from datetime import datetime
from flask import Flask
import threading

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
logging.basicConfig(level=logging.INFO)
TOKEN = os.getenv("BOT_TOKEN")
USER_ID = int(os.getenv("USER_ID"))
bot = telebot.TeleBot(TOKEN)

# Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
app = Flask(__name__)

@app.route('/')
def home():
    return "–ì–ª–µ—á–∏–∫ –ø—Ä–∞—Ü—é—î! üß†"

# –õ–æ–≥-—Ñ–∞–π–ª
LOG_FILE = "progress_log.txt"

# –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
morning_text = """üéØ –î–æ–±—Ä–∏–π —Ä–∞–Ω–æ–∫, –≥–ª–µ—á–∏–Ω–æ!
–ü–ª–∞–Ω –¥—ñ–π –∑–∞–º—ñ—Å—Ç—å TikTok:
1Ô∏è‚É£ –í–æ–¥–∞
2Ô∏è‚É£ –ü–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å
3Ô∏è‚É£ –ú—ñ–∫—Ä–æ—É—Å–ø—ñ—Ö (–±—É–¥—å-—è–∫–∏–π)

–ù–∞–ø–∏—à–∏ /done –∫–æ–ª–∏ —â–æ—Å—å –≤–∏–∫–æ–Ω–∞—î—à.
"""

midday_text = """‚è≥ 15:00.
–¢–∏ —â–µ –∑ –Ω–∞–º–∏? –Ø–∫—â–æ –Ω—ñ ‚Äî –∫–∏–Ω—å TikTok —ñ –∑—Ä–æ–±–∏ —â–æ—Å—å, —â–æ –∑—Ä–æ–±–∏—Ç—å —Ç–µ–±–µ –≥–æ—Ä–¥–∏–º.
"""

evening_text = """üåô –í–µ—á—ñ—Ä –Ω–∞—Å—Ç–∞–≤.
–ù–∞–ø–∏—à–∏, —â–æ —Ç–∏ –∑—Ä–æ–±–∏–≤ —Å—å–æ–≥–æ–¥–Ω—ñ. –ù–∞–ø—Ä–∏–∫–ª–∞–¥:
–°—å–æ–≥–æ–¥–Ω—ñ: –¥–æ—á–∏—Ç–∞–≤ –∫–Ω–∏–≥—É, –∑—Ä–æ–±–∏–≤ 10 –ø—Ä–∏—Å—ñ–¥–∞–Ω—å, –Ω–µ –≥–æ—Ä—Ç–∞–≤ —Ä—ñ–ª—Å–∏.

–Ø –∑–±–µ—Ä–µ–∂—É —ñ –¥–∞–º —Ñ–ª–µ–∫—Å–Ω—É—Ç–∏—Å—è –∑–∞–≤—Ç—Ä–∞.
"""

def send_timed_messages():
    now = datetime.utcnow()
    hour = now.hour
    day = (now.date() - datetime(2025, 5, 16).date()).days % 7

    try:
        if hour == 5:  # 08:00 –∑–∞ –ö–∏—î–≤–æ–º
            bot.send_message(USER_ID, morning_text)
        elif hour == 12:  # 15:00 –∑–∞ –ö–∏—î–≤–æ–º
            bot.send_message(USER_ID, midday_text)
        elif hour == 21:  # 00:00 –∑–∞ –ö–∏—î–≤–æ–º
            bot.send_message(USER_ID, evening_text)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

@bot.message_handler(commands=['done'])
def handle_done(message):
    user_input = message.text.replace("/done", "").strip()
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M")
    if user_input:
        with open(LOG_FILE, "a", encoding="utf-8") as f:
            f.write(f"[{timestamp}] {user_input}\n")
        bot.reply_to(message, "üìù –ó–∞–ø–∏—Å–∞–Ω–æ. –ì–ª–µ—á–∏–∫ –≥–æ—Ä–¥–∏–π.")
    else:
        bot.reply_to(message, "–ù–∞–ø–∏—à–∏ –ø—ñ—Å–ª—è /done, —â–æ —Ç–∏ –∑—Ä–æ–±–∏–≤. –ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n/done –∑—Ä–æ–±–∏–≤ —Ä–∞–Ω–∫–æ–≤—É —Ä—É—Ç–∏–Ω—É")

@bot.message_handler(commands=['show_today'])
def handle_show_today(message):
    today = datetime.now().strftime("%Y-%m-%d")
    if os.path.exists(LOG_FILE):
        with open(LOG_FILE, "r", encoding="utf-8") as f:
            lines = f.readlines()
        today_logs = [line for line in lines if line.startswith(f"[{today}")]
        if today_logs:
            bot.reply_to(message, "üìò –¢–≤–æ—ó —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ –∑–∞–ø–∏—Å–∏:\n" + "".join(today_logs))
        else:
            bot.reply_to(message, "–°—å–æ–≥–æ–¥–Ω—ñ —â–µ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ. –ß–µ–∫–∞—é –ø–µ—Ä—à–∏–π —Ñ–ª–µ–∫—Å üí™")
    else:
        bot.reply_to(message, "–õ–æ–≥ –ø–æ–∫–∏ —â–æ –ø–æ—Ä–æ–∂–Ω—ñ–π.")

def run_bot():
    while True:
        send_timed_messages()
        time.sleep(3600)

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    threading.Thread(target=run_bot).start()
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
