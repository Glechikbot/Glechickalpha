
import logging
import os
import time
import telebot
from datetime import datetime
from flask import Flask
import threading

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
TOKEN = os.getenv("BOT_TOKEN")
USER_ID = int(os.getenv("USER_ID"))
bot = telebot.TeleBot(TOKEN)

# Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è keep-alive
app = Flask(__name__)

@app.route('/')
def home():
    return "–ì–ª–µ—á–∏–∫ –∂–∏–≤–∏–π! üöÄ"

# –§–∞–π–ª –ª–æ–≥—É –ø—Ä–æ–≥—Ä–µ—Å—É
LOG_FILE = "progress_log.txt"

# –¢–µ–∫—Å—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
messages = {
    "05:00": """üéØ –î–æ–±—Ä–∏–π —Ä–∞–Ω–æ–∫, –≥–ª–µ—á–∏–Ω–æ!
–ü–ª–∞–Ω –¥—ñ–π –∑–∞–º—ñ—Å—Ç—å TikTok:
1Ô∏è‚É£ –í–æ–¥–∞
2Ô∏è‚É£ –ü–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å
3Ô∏è‚É£ –ú—ñ–∫—Ä–æ—É—Å–ø—ñ—Ö (–±—É–¥—å-—è–∫–∏–π)

–ù–∞–ø–∏—à–∏ /done –∫–æ–ª–∏ —â–æ—Å—å –≤–∏–∫–æ–Ω–∞—î—à.
""",
    "10:30": """üîî 13:30 ‚Äî —Ç–æ—á–∫–∞ –∑—É–ø–∏–Ω–∫–∏.
–ó—É–ø–∏–Ω–∏—Å—å –Ω–∞ —Ö–≤–∏–ª–∏–Ω—É. –û—Ü—ñ–Ω–∏ —Å–≤—ñ–π —Å—Ç–∞–Ω. –†—É—Ö–∞–π—Å—è –¥–∞–ª—ñ –∑ —è—Å–Ω—ñ—Å—Ç—é, –∞ –Ω–µ —ñ–Ω–µ—Ä—Ü—ñ—î—é.
""",
    "12:53": """‚è≥ 15:53.
–¢–∏ —â–µ –∑ –Ω–∞–º–∏? –Ø–∫—â–æ –Ω—ñ ‚Äî –∫–∏–Ω—å TikTok —ñ –∑—Ä–æ–±–∏ —â–æ—Å—å, —â–æ –∑—Ä–æ–±–∏—Ç—å —Ç–µ–±–µ –≥–æ—Ä–¥–∏–º.
""",
    "14:00": """üîî 17:00 ‚Äî —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å.
–ü–µ—Ä–µ–≥–ª—è–Ω—å —Å–ø–∏—Å–æ–∫ —Å–ø—Ä–∞–≤ —ñ –∑—Ä–æ–±–∏ —Ö–æ—á–∞ –± –æ–¥–Ω—É —Ä—ñ—á —ñ–∑ –Ω—å–æ–≥–æ.
""",
    "21:00": """üåô –í–µ—á—ñ—Ä –Ω–∞—Å—Ç–∞–≤.
–ù–∞–ø–∏—à–∏, —â–æ —Ç–∏ –∑—Ä–æ–±–∏–≤ —Å—å–æ–≥–æ–¥–Ω—ñ. –ù–∞–ø—Ä–∏–∫–ª–∞–¥:
–°—å–æ–≥–æ–¥–Ω—ñ: –¥–æ—á–∏—Ç–∞–≤ –∫–Ω–∏–≥—É, –∑—Ä–æ–±–∏–≤ 10 –ø—Ä–∏—Å—ñ–¥–∞–Ω—å, –Ω–µ –≥–æ—Ä—Ç–∞–≤ —Ä—ñ–ª—Å–∏.

–Ø –∑–±–µ—Ä–µ–∂—É —ñ –¥–∞–º —Ñ–ª–µ–∫—Å–Ω—É—Ç–∏—Å—è –∑–∞–≤—Ç—Ä–∞.
"""
}

# –°—Ç–∞–Ω –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö –∑–∞ –¥–µ–Ω—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
sent_flags = set()
last_day = None

def send_timed_messages():
    global sent_flags, last_day
    now = datetime.utcnow()
    time_key = now.strftime("%H:%M")
    today_day = now.strftime("%Y-%m-%d")

    # –Ø–∫—â–æ –Ω–æ–≤–∏–π –¥–µ–Ω—å ‚Äî –æ—á–∏—â–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä—Ü—ñ
    if last_day != today_day:
        sent_flags.clear()
        last_day = today_day
        logging.info(f"üìÜ –ù–æ–≤–∏–π –¥–µ–Ω—å: {today_day}, —Å–∫–∏–Ω—É—Ç–æ sent_flags")

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —è–∫—â–æ —á–∞—Å —Å–ø—ñ–≤–ø–∞–¥–∞—î —ñ —â–µ –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è–ª–∏
    if time_key in messages and time_key not in sent_flags:
        try:
            bot.send_message(USER_ID, messages[time_key])
            logging.info(f"[{time_key}] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ")
            sent_flags.add(time_key)
        except Exception as e:
            logging.error(f"[{time_key}] –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è: {e}")
    else:
        logging.info(f"[{time_key}] –ù—ñ—á–æ–≥–æ –Ω–µ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –∞–±–æ –≤–∂–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ")

    # –ü—ñ–Ω–≥ —É –∫–æ–Ω—Å–æ–ª—å, —â–æ–± –±–∞—á–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
    print(f"üíì –ü—ñ–Ω–≥: {time_key} ‚Äî –±–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π")

# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /done
@bot.message_handler(commands=['done'])
def handle_done(message):
    user_input = message.text.replace("/done", "").strip()
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M")
    if user_input:
        with open(LOG_FILE, "a", encoding="utf-8") as f:
            f.write(f"[{timestamp}] {user_input}
")
        bot.reply_to(message, "üìù –ó–∞–ø–∏—Å–∞–Ω–æ. –ì–ª–µ—á–∏–∫ –≥–æ—Ä–¥–∏–π.")
    else:
        bot.reply_to(message, "–ù–∞–ø–∏—à–∏ –ø—ñ—Å–ª—è /done, —â–æ —Ç–∏ –∑—Ä–æ–±–∏–≤. –ù–∞–ø—Ä–∏–∫–ª–∞–¥:
/done –∑—Ä–æ–±–∏–≤ —Ä–∞–Ω–∫–æ–≤—É —Ä—É—Ç–∏–Ω—É")

# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /show_today
@bot.message_handler(commands=['show_today'])
def handle_show_today(message):
    today = datetime.now().strftime("%Y-%m-%d")
    if os.path.exists(LOG_FILE):
        with open(LOG_FILE, "r", encoding="utf-8") as f:
            lines = f.readlines()
        today_logs = [line for line in lines if line.startswith(f"[{today}")]
        if today_logs:
            bot.reply_to(message, "üìò –¢–≤–æ—ó —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ –∑–∞–ø–∏—Å–∏:
" + "".join(today_logs))
        else:
            bot.reply_to(message, "–°—å–æ–≥–æ–¥–Ω—ñ —â–µ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ. –ß–µ–∫–∞—é –ø–µ—Ä—à–∏–π —Ñ–ª–µ–∫—Å üí™")
    else:
        bot.reply_to(message, "–õ–æ–≥ –ø–æ–∫–∏ —â–æ –ø–æ—Ä–æ–∂–Ω—ñ–π.")

# Thread –¥–ª—è —à–µ–¥—É–ª–µ—Ä–∞
def run_scheduler():
    while True:
        send_timed_messages()
        time.sleep(60)

# Thread –¥–ª—è polling –∫–æ–º–∞–Ω–¥
def run_polling():
    bot.polling(none_stop=True)

# –°—Ç–∞—Ä—Ç —Å–µ—Ä–≤—ñ—Å—É
if __name__ == '__main__':
    threading.Thread(target=run_scheduler, daemon=True).start()
    threading.Thread(target=run_polling, daemon=True).start()
    app.run(host='0.0.0.0', port=int(os.environ.get("PORT", 10000)))
